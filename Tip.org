#+AUTHOR: [[http://blog.saisimon.net][Saisimon]]

#+BEGIN_HTML
<link rel="stylesheet" href="css/main.css" >
#+END_HTML

* Tip
** Windows
*** 右键添加命令提示符(CMD)
    1. Win + R 运行 regedit
    2. 找到 计算机 > HKEY_CLASSES_ROOT > Folder > shell
    3. 右键shell 新建 -> 项 -> 命令提示符
    4. 右键命令提示符 新建 -> 项 -> command
    5. 点击(默认)项 输入 C:\Windows\System32\cmd.exe /k cd %1 然后点击确认
*** 修改 XShell Alt 键作为 Meta 键, Backspace 键作为删除键
    1. 打开XShell 选择 文件 -> 属性
    2. 选择 终端 -> 键盘
    3. 选中 将 Alt 用作 Meta 键
    4. BACKSPACE 键序列 中选择 ASCII 127 确认
*** 常见文件头特征（魔数）
    | jpg            | FF D8 FF                      | png         | 89 50 4E 47    |
    | gif            | 47 49 46 38                   | bmp         | 42 4D          |
    | pdf            | 25 50 44 46                   | xml         | 3C 3F 78 6D 6C |
    | docx/xlsx/pptx | 50 4B 03 04 14 00 06 00 08 00 | doc/xls/ppt | D0 CF 11 E0    |
    | zip            | 50 4B 03 04                   | rar         | 52 61 72 21    |
    | avi            | 41 56 49 20                   | class       | ca fe ba be    |
    | exe            | 4D 5A 90 00 03                | psd         | 38 42 50 53    |
    [[https://en.wikipedia.org/wiki/Magic_number_(programming)][更多]]
** Linux
*** 查看 linux 内存占用
    1. 使用 [[http://man.linuxde.net/top][top]] 命令来查看各个进程的使用情况
    2. 按 Shift + m ,即 M 按内存占用率排序
*** linux 解压 ([[http://man.linuxde.net/tar][tar]] 命令、[[http://man.linuxde.net/unzip][unzip]] 命令)
    #+BEGIN_SRC
      1. 解压 .tar 文件
      $ tar -xf *.tar

      2. 解压 .tar.gz 文件
      $ tar -xzf *.tar.gz

      3. 解压 .tar.xz 文件
      $ xz -d *.tar.xz
      $ tar -xf *.tar

      4. 解压 .tar.bz2 文件 
      $ tar -jxvf *.tar.bz2
      - 如果tar不支持j选项，就用下面方式解压
      $ bzip2 -d  *.tar.bz2
      $ tar -xvf  *.tar.bz2

      5. 解压 .tar.Z 文件
      $ tar -xZf *.tar.Z

      6. 解压 .zip 文件
      $ unzip *.zip

      7. 解压到指定路径
      $ tar -xzvf *.tar.gz -C ~/dic/
      $ unzip *.zip -d ~/dic/
    #+END_SRC
*** linux 下 nginx 安装、启动、重启、停止
    安装
    #+BEGIN_SRC 
      tar -xzf nginx-${version}.tar.gz
      cd nginx-${version}
      yum install -y pcre-devel openssl-devel
      ./configure 
      make
      make install
    #+END_SRC
    nginx 默认安装路径 
    #+BEGIN_SRC 
      /usr/local/nginx
    #+END_SRC
    启动 
    #+BEGIN_SRC 
      ${nginx_path}/sbin/nginx
    #+END_SRC
    启动指定配置文件 
    #+BEGIN_SRC 
      ${nginx_path}/sbin/nginx -c ${conf_path}
    #+END_SRC
    重启 
    #+BEGIN_SRC 
      ${nginx_path}/sbin/nginx -s reload
    #+END_SRC
    停止 
    #+BEGIN_SRC 
      ${nginx_path}/sbin/nginx -s stop
    #+END_SRC
*** nginx 反向代理配置
    在 http-server-location / 下填写反向代理配置
    #+BEGIN_SRC
      proxy_pass http://localhost:8080;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #+END_SRC
*** linux 下安装 cheat 命令
    - 通过 pip 安装 cheat
    #+BEGIN_SRC 
    - 安装 python 和 pip
      $ yum install python-pip -y
    - 更新 pip
      $ pip install --upgrade pip
    - 安装 cheat
      $ pip install cheat
    #+END_SRC
    - 通过 github 下载源码安装 cheat
    #+BEGIN_SRC 
    - 安装 python 和 pip
      $ yum install python-pip -y
    - 更新 pip
      $ pip install --upgrade pip
    - 安装编译工具
      $ pip install docopt pygments appdirs
    - clone cheat 源码
      $ git clone git@github.com:chrisallenlane/cheat.git
    - 进入源码目录
      $ cd cheat
    - 编译安装 cheat
      $ python setup.py install
    #+END_SRC
*** linux 设置命令别名
    - 列出目前所有的别名设置
      #+BEGIN_SRC 
      $ alias
      alias l.='ls -d .* --color=auto'
      alias ll='ls -l --color=auto'
      alias ls='ls --color=auto'
      alias vi='vim'
      #+END_SRC
    - 设置指令的别名(本次登录有效)
      #+BEGIN_SRC 
      $ alias [别名]=[指令名称]
      $ alias la='ls -a'
      $ alias cp='cp -i'
      #+END_SRC
    - 每次登录自动设置，修改自己的配置文件
      #+BEGIN_SRC
      # 编辑配置文件
      $ vim ~/.bash_profile
      # 配置别名
      alias ..='cd ..'
      alias cp='cp -i'
      alias df='df -h'
      alias home='cd ~'
      alias l.='ls -d .* --color=auto'
      alias la='ls -a --color=auto'
      alias ll='ls -l --color=auto'
      alias ls='ls --color=auto'
      alias targz='tar -xzvf'
      alias vi='vim'
      # 重新加载配置文件
      $ source .bash_profile
      #+END_SRC

** Database
*** Mysql
**** 查询 Mysql 数据库大小
    - 选择指定 [[http://dev.mysql.com/doc/refman/5.7/en/tables-table.html][information_schema 数据库]]
      #+BEGIN_SRC sql
            use information_schema;
      #+END_SRC
    - 查询整个数据库大小
      #+BEGIN_SRC sql
            select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from TABLES;
      #+END_SRC
    - 查询指定数据库大小
      #+BEGIN_SRC sql
            select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from TABLES where table_schema='your_database_name';
      #+END_SRC
    - 查询指定数据库下某个表的大小
      #+BEGIN_SRC sql
            select concat(round(sum(DATA_LENGTH/1024/1024),2),'MB') as data from TABLES where table_schema='your_database_name' and table_name='your_table_name';
      #+END_SRC
**** Mysql 数据库存中文字符乱码解决方法
    - 修改 [[http://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html][jdbc.url 配置]]
      #+BEGIN_SRC 
            jdbc.url=jdbc:mysql://ip-address:port/your_database_name?useUnicode=true&characterEncoding=utf8
      #+END_SRC
**** Mysql 新增用户, 并附指定权限
    - [[http://dev.mysql.com/doc/refman/5.7/en/adding-users.html][新增用户]]
      #+BEGIN_SRC sql
            create user ['username']@['localhost'] identified by ['password'];
      #+END_SRC
    - [[http://dev.mysql.com/doc/refman/5.7/en/adding-users.html][附指定权限]]
      #+BEGIN_SRC sql
            grant all privileges on [database].[table] to ['username']@['localhost'];
      #+END_SRC
    - [[http://dev.mysql.com/doc/refman/5.7/en/removing-users.html][删除用户]]
      #+BEGIN_SRC sql
            drop user ['username']@['localhost'];
      #+END_SRC
      
** C
*** C
**** 位操作
     #+BEGIN_SRC c
     int value;
     // 将指定位设置为1
     value = value | (1 << bit_number);
     // 将指定位设置为0
     value = value & ~ (1 << bit_number);
     // 判断指定位是否为1，为1时表达式结果为非零，0时表达式结果为0
     int flag = value & (1 << bit_number);
     if (flag) {
             printf("第%d位值为1", bit_number);
     } else {
             printf("第%d位值为0", bit_number);
     }
     #+END_SRC
** Java
*** Java
**** 操作 jar 包
     #+BEGIN_SRC 
     - 查看 jar 包中的内容
       $ jar -tf *.jar
     - 解压出 jar 包中的内容
       $ jar -xf *.jar
     #+END_SRC
**** byte 数组与 int 互转
     #+BEGIN_SRC java
     private int byteArrayToInt(byte[] bytes) {
         int value = 0;
         for (int i = 0; i < 4; i++) {
             int shift = (4 - 1 - i) * 8;
             value += (bytes[i] & 0x000000FF) << shift;
         }
         return value;
     }

     private byte[] intToByteArray(int i) {
         byte[] result = new byte[4];
         result[0] = (byte) ((i >> 24) & 0xFF);
         result[1] = (byte) ((i >> 16) & 0xFF);
         result[2] = (byte) ((i >> 8) & 0xFF);
         result[3] = (byte) (i & 0xFF);
         return result;
     }
     #+END_SRC
**** 倒序遍历 LinkedHashMap 集合
     #+BEGIN_SRC java
     Map<Integer, String> data = new LinkedHashMap<>();
     for (int i = 0; i < 5; i++) {
         data.put(i, "A" + i);
     }
     ListIterator<Map.Entry<Integer, String>> it = new ArrayList<>(data.entrySet()).listIterator(data.size());
     while (it.hasPrevious()) {
         Map.Entry<Integer, String> entry = it.previous();
         System.out.println("key : " + entry.getKey() + " value : " + entry.getValue());
     }
     #+END_SRC
**** 使用异或操作交换两个数字
     #+BEGIN_SRC java
     /**
       a = a ^ b;
       b = b ^ a;
       a = a ^ b;
     */
     private void swap(int[] nums, int a, int b) {
             nums[a] = nums[a] ^ nums[b];
             nums[b] = nums[b] ^ nums[a];
             nums[a] = nums[a] ^ nums[b];
     }
     #+END_SRC
**** 分页计算页数
     #+BEGIN_SRC java
     // 每页记录数
     int pageSize;
     // 总记录数
     int rowCount;
     // 页数
     int pageCount = (rowCount - 1) / pageSize + 1;
     #+END_SRC
**** 分割 Map
     #+BEGIN_SRC java
     /**
     ,* 当数据量较少时，该方法较全部遍历的效率要低
     ,* 当数据量较大且分割大小远小于总数据量时，该方法效率较高
     ,*/
     import com.google.common.base.Predicates;
     import com.google.common.collect.Maps;

     // map 为待分割 map 集合
     // 分割大小
     int size = 10000;
     // map 总大小
     int all = map.size();
     // 分割结果
     List<Map<String, Integer>> res = new ArrayList<>();
     // key 的 list 集合
     List<String> list = new ArrayList<>(map.keySet());
     // 遍历次数
     for (int j = 0; j < all / size; j++) {
             // Maps，Predicates 为 Google 的 guava 库中的类
             Map<String, Integer> subMap = Maps.filterKeys(map, Predicates.in(list.subList(j * size, (j + 1) * size)));
             res.add(subMap);
     }
     #+END_SRC
*** Web
**** 前端页面传中文字符乱码解决方法
    - 修改 [[https://docs.oracle.com/cd/E14571_01/web.1111/e13712/web_xml.htm#WBAPP515][web.xml]] 文件, 添加 [[http://docs.spring.io/spring/docs/4.3.0.BUILD-SNAPSHOT/javadoc-api/org/springframework/web/filter/CharacterEncodingFilter.html][CharacterEncodingFilter]] 
      #+BEGIN_SRC xml
          <filter>
              <filter-name>CharacterEncodingFilter</filter-name>
              <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
              <init-param>
                  <param-name>encoding</param-name>
                  <param-value>UTF-8</param-value>
              </init-param>
              <init-param>
                  <param-name>forceEncoding</param-name>
                  <param-value>true</param-value>
              </init-param>
          </filter>

          <filter-mapping>
                <filter-name>CharacterEncodingFilter</filter-name>
                <url-pattern>/*</url-pattern>
          </filter-mapping>
      #+END_SRC
    - filter 需要放在所有 filter 的前面才会生效
**** 常见 ContentType 与文件后缀名对应关系
     | 文件扩展名        | ContentType                                                       |
     |------------------+-------------------------------------------------------------------|
     | .html            | text/html                                                         |
     | .doc             | application/msword                                                |
     | .ppt             | application/vnd.ms-powerpoint                                     |
     | .xls             | application/vnd.ms-excel                                          |
     | .xlsx            | application/vnd.openxmlformats-officedocument.spreadsheetml.sheet |
     | .xml             | text/xml                                                          |
     | .txt             | text/plain                                                        |
     | .pdf             | application/pdf                                                   |
     | .jpeg            | image/jpeg                                                        |
     | .js              | application/x-javascript                                          |
     | .css             | text/css                                                          |
     | .*(未知二进制流)  | application/octet-stream                                          |
     [[http://tool.oschina.net/commons][更多]]
*** Maven
**** Maven 基本操作
     #+BEGIN_SRC
     - 创建Maven的普通java项目
       $ mvn archetype:create -DgroupId=[packageName] -DartifactId=[projectName]
     - 创建Maven的Web项目
       $ mvn archetype:create -DgroupId=[packageName] -DartifactId=[webappName] -DarchetypeArtfactId=maven-archetype-webapp
     - 编译源码
       $ mvn compile
     - 打包
       $ mvn package
     - 在本地Repository中安装jar
       $ mvn install
     - 清理项目
       $ mvn clean
     - 生成eclipse/idea项目
       $ mvn eclipse:eclipse
       $ mvn idea:idea
     - 生成站点信息
       $ mvn site
     #+END_SRC
**** Maven 跳单元测试
    - 跳过单元测试
      #+BEGIN_SRC 
        $ mvn install -Dmaven.test.skip=true
      #+END_SRC
**** Maven 指定编译版本
    - 添加编译插件
      #+BEGIN_SRC xml
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.5.1</version>
            <configuration>  
              <source>1.X</source>  
              <target>1.X</target>  
              <encoding>UTF-8</encoding>  
            </configuration>  
          </plugin>
        </plugins>
      </build> 
      #+END_SRC
**** pom.xml 文件 - Missing artifact jdk.tools:jdk.tools:jar:1.x
     - pom 文件添加 tools 依赖
     #+BEGIN_SRC 
       <dependency>
			<groupId>jdk.tools</groupId>
			<artifactId>jdk.tools</artifactId>
			<version>1.x</version>
			<scope>system</scope>
    		<systemPath>${JAVA_HOME}/lib/tools.jar</systemPath>
	  </dependency>
     #+END_SRC
*** Tomcat
**** 导入 Web 项目，Tomcat 无法添加部署问题 - Tomcat version X.0 only supports J2EE 1.2, 1.3, 1.4, and Java EE X...
     - 其主要原因为当前 Tomcat 版本与该 Web 项目的Web版本不兼容，Tomcat 6支持 Web 2.5及以下版本，tomcat 7支持 Web 3.0及以下版本
     - 在 Eclipse 中：Project -> Properties -> Project Facets -> Dynamic Web Module，检查 Web 项目的Web版本
     1. Eclipse 环境下的修改方法为：项目根目录找到 .setting 文件夹中的 org.eclipse.wst.common.project.facet.core.xml 文件，修改其中 jst.web 的 version 的值至当前 Tomcat 支持的版本
     2. 更新 Tomcat 版本，使其与 Web 版本兼容
**** 配置从根目录访问 Tomcat 下的 Web 项目
     #+BEGIN_SRC xml
     <!-- docBase为webapp的路径 path为发布的路径，根目录访问这里留空  -->
     <!-- Context 标签配置在 Tomcat 目录下 conf 文件里的 Server.xml 配置文件中  -->
     <Server>
       <Service>
         <Engine>
           <Host>
             <Context docBase="[webapp_path]" path="" reloadable="true"/>
           </Host>
         </Engine>
       </Service>
     </Server>
     #+END_SRC
**** eclipse 中 Web 项目配置根目录访问
     - 修改 Web 项目的 Context Path
     1. 打开 web project folder >> .setting >> org.eclipse.wst.common.component 文件
     2. 编辑该文件，修改其中 content-root 属性为空值
     #+BEGIN_SRC xml
     <project-modules id="moduleCoreId" project-version="1.5.0">
         <wb-module deploy-name="webapp">
             ...
             <property name="context-root" value=""/>
         </wb-module>
     </project-modules>
     #+END_SRC
*** JNI
**** 使用 javah 生成头文件问题 - Error: Could not find class file for "X"
     #+BEGIN_SRC
     - HelloWorld.class 在 net.saisimon.jni 包中
       $ javah HelloWorld
       Error: Could not find class file for 'HelloWorld'.
     - HelloWorld 在 Java 包中，需要到包的根目录执行 javah 命令
       $ cd ../../../
       $ javah net.saisimon.jni.HelloWorld
     - 即可生成头文件 net_saisimon_jni_HelloWorld.h
     #+END_SRC
*** 多线程
**** 统计所有线程消耗的总时间
     #+BEGIN_SRC java
     package net.saisimon.test

     import java.util.concurrent.CountDownLatch;
     import java.util.concurrent.ExecutorService;
     import java.util.concurrent.Executors;

     import org.apache.commons.codec.digest.DigestUtils;

     public class Test implements Runnable {
         
         volatile int vote = 0;
         CountDownLatch cdl = new CountDownLatch(5);
             
         @Override
         public void run() {
             parse();
             // 递减计数器
             cdl.countDown();
         }

         public void parse() {
             while (vote < 10) {
                 int x = 0;
                 int v = vote;
                 vote++;
                 String tmp = "Saisimon" + v + x;
                 String md5 = DigestUtils.md5Hex(tmp);
                 while (!md5.startsWith("000000")) {
                     x++;
                     tmp = "Saisimon" + v + x;
                     md5 = DigestUtils.md5Hex(tmp);
                 }
                 System.out.println("thread : " + Thread.currentThread().getName() + " , vote : " + v + " , x : " + x);
             }
         }

         public static void main(String[] args) {
             Test t = new Test();
             long start = System.currentTimeMillis();
             ExecutorService es = Executors.newFixedThreadPool(5);
             for (int i = 0; i < 5; i++) {
                 es.execute(t);
             }
             es.shutdown();
             try {
                 // 计数器减至零时，await 会被执行
                 p.cdl.await();
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
             System.out.println("多线程耗时:" + (System.currentTimeMillis() - start));
         }
     }
     #+END_SRC
*** Solr
**** Solr 导入 csv 文件数据
     #+BEGIN_SRC 
       http://localhost:8983/solr/item/update?commit=true&stream.file=d:/tmp/solr_data.csv&stream.contentType=application/csv
     #+END_SRC
*** Eclipse
**** 显示 Eclipse 内存堆占用条，手动 GC
     - 修改配置文件 {workspaceHome}/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.prefs 
     #+BEGIN_SRC 
       SHOW_MEMORY_MONITOR=true
     #+END_SRC
** Python
*** SCons
**** CentOS 下编译安装 SCons
     #+BEGIN_SRC
     - 确定系统中安装了 Python
       $ python -V
       Python 2.6.6
     - 方式一: 使用 yum 安装 SCons
       $ yum install scons
     - 方式二: 使用安装包安装 SCons
       - 去官网下载 SCons 安装包，解压
       $ tar -xzvf scons-2.4.1.tar.gz
       - 编译安装，默认安装路径 /usr/lib/scons-2.4.1
       $ python setup.py install [--prefix=/xx/xx]
     - 查看版本号
       $ scons -v
     #+END_SRC

** JavaScript
*** JavaScript
**** JavaScript 类型判断
    - 是否为数字
      #+BEGIN_SRC javascript
      function isNumber(obj) {
          return obj === +obj;
      }
      #+END_SRC
    - 是否为字符串
      #+BEGIN_SRC javascript
      function isString(obj) {
          return obj === obj + '';
      }
      #+END_SRC
    - 是否为布尔类型
      #+BEGIN_SRC javascript
      function isBoolean(obj) {
          return obj === !!obj;
      }
      #+END_SRC
**** JavaScript 首字母大写
     #+BEGIN_SRC javascript
     function toCapitalizeCase(str) {
         if (!str || str.length === 0) {
             return str;
         }
         if (str.length == 1) {
             return str.toUpperCase();
         } else {
             return str[0].toUpperCase() + str.substring(1);
         }
     }
     #+END_SRC
*** JQuery
**** JQuery 与 Prototype 中 $ 符号冲突解决方法
    - JQuery 在 prototype 之后引入，即：
      #+BEGIN_SRC xml
      <script src="prototype.js" type="text/javascript"/> 
      <script src="jquery.js" type="text/javascript"/>
      #+END_SRC
      #+BEGIN_SRC javascript
      // 改变 JQuery 的选择标识符，将 $ 的控制权交还给 Prototype 。
      var jq = JQuery.noConflict();
      // 使用 JQuery 选择器的方式改为如下：
      jq("#id").text();
      #+END_SRC
    - JQuery 在 prototype 之前引入，即：
      #+BEGIN_SRC xml
      <script src="jquery.js" type="text/javascript"/> 
      <script src="prototype.js" type="text/javascript"/>
      #+END_SRC
      #+BEGIN_SRC javascript
      // 这种情况 $ 为 Prototype 中定义的标识符，要想使用 JQuery 的选择器，需用如下形式：
      JQuery("#id").text();
      #+END_SRC
    - 通用解决方案，不管引入的先后顺序：
      #+BEGIN_SRC javascript
      // JQuery 放弃 $ 所有权
      JQuery.noConflict();
      (function($){ 
              .....
              //此时在这个语句块中使用的都是 JQuery 中定义的 $
              $('#id').text(); 
      })(JQuery)
      #+END_SRC

**** JQuery 获取 url 参数
    #+BEGIN_SRC javascript
    $.extend({
        getUrlVars: function(){
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for(var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        },
        getUrlVar: function(name){
            return $.getUrlVars()[name];
        }
    });

    // 调用方法
    $(document).ready(function() {
        var args = $.getUrlVars();
        var arg1 = $.getUrlVar('argName1');
        var arg2 = $.getUrlVar('argName2');
    });
    #+END_SRC
*** Prototype
**** Prototype 获取 select 选择框中选中文本
     #+BEGIN_SRC javascript
     // 选择框中选中文本的下标
     var idx = $(id).selectedIndex;
     // 获取文本
     var text = $(id).options[idx].text.strip();
     #+END_SRC

** Emacs
*** 安装 Emacs 时，error: The required function `tputs' was not found in any library
    - 缺少 libncurses-dev 包
    #+BEGIN_SRC 
    $ yum install libncurses-dev -y
    或
    $ apt-get install libncurses-dev
    #+END_SRC
   
** Git
*** Git 基本操作
    #+BEGIN_SRC 
    - 初始化
      $ git init
    - clone别人的库
      $ git clone ssh://user@domain.com/repo.git
    - 查看库的状态
      $ git status
    - 查看工作区与暂存区文件的修改
      $ git diff
    - 添加文件到暂存区
      $ git add .
    - 提交文件到本地库
      $ git commit
    - 提交历史纪录
      $ git log
    - 查看库的分支
      $ git branch
    - 切换分支
      $ git checkout <branch>
    - 将本地库推送至远程库中
      $ git push <remote> <branch>
    - 将指定分支合并至当前分支
      $ git merge <branch>
    #+END_SRC
*** 更新 .gitignore 后，清理 Git 仓库
    #+BEGIN_SRC 
    - 清理暂存区的文件
      $ git rm -r --cached .
    - 添加所有文件
      $ git add .
    - 提交
      $ git commit -m ".gitignore is now working"
    #+END_SRC
*** Git 在 push 之前撤回最近一次 commit 命令
    #+BEGIN_SRC 
      $ git reset --soft HEAD^
    #+END_SRC
*** 修改 Git 别名
    - 修改 .gitconfig 文件中[alias]属性
       #+BEGIN_SRC 
         $ vi ~/.gitconfig
           [alias]
               st = status
               ci = commit
               co = checkout
               br = branch
       #+END_SRC
    - 使用 git config --global alias.[alias-name] [operation-name]
       #+BEGIN_SRC 
         # 表示将 st 作为 status 的别名，可以直接使用 git st 命令
         $ git config --global alias.st status
       #+END_SRC
*** Git 推送代码
    #+BEGIN_SRC
    - 首次推送，添加远程代码库至配置
      $ git remote add tip https://github.com/Saisimon/tip.git
    - 推送代码至远程代码库
      $ git push tip master
    - 输入账号密码进行确认
    #+END_SRC
*** Git 拉取代码
    #+BEGIN_SRC
    - 暂存工作区
     $ git stash
    - 拉取远程代码
     $ git pull origin master
    - 还原最近一次工作区的内容
     $ git stash pop
    - 出现冲突时，解决冲突提交即可
    #+END_SRC
*** 添加新 ssh_key 至 Github
    #+BEGIN_SRC
    - 检查是否存在 .ssh 文件夹
      $ cd ~/.ssh
    - 生成 ssh_key
      $ ssh-keygen -t rsa -C "youremail@email.com"
    - 输入密码
    - 启动 ssh-agent
      $ eval "$(ssh-agent -s)"
    - 添加 ssh_key 到 ssh-agent
      $ ssh-add ~/.ssh/id_rsa
    - 将 id_rsa.pub 中的key添加进 Github 中
      github >> Settings >> SSH and GPG keys >> new SSH key
    - 测试联通性
      $ ssh git@github.com
      Hi Saisimon! You've successfully authenticated, but GitHub does not provide shell access.
      Connection to github.com closed.
    #+END_SRC
*** Git status 输出中文为 UNICODE 解决方法
    - 修改 git config 属性
      #+BEGIN_SRC
        $ git config --global core.quotepath false
      #+END_SRC
    - 修改修改 git 配置文件
      #+BEGIN_SRC
        $ vi ~/.gitconfig
          [core]
              quotepath = false
      #+END_SRC
*** Git push 时，fatal: Authentication failed
    - 修改 remote 地址
      #+BEGIN_SRC
         $ git remote set-url origin <ssh url>
      #+END_SRC